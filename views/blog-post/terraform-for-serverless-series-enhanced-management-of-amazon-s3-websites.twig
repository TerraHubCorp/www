{% extends '../blog-post.twig' %}

{% block content %}
    <div class="container u-maxWidth740">
        <h1>Terraform for Serverless Series: Enhanced Management of Amazon S3 Websites</h1>
        <p class="graf-gray">September 28th, 2018 / 5 min read </p>
        <p class="graf graf-up">
            Last week I started working on a new series of stories focused on terraform for serverless. In the first article I took <a href="https://www.terraform.io/docs/providers/aws/guides/serverless-with-aws-lambda-and-api-gateway.html">Severless Applications with AWS Lambda and API Gateway</a> user guide and improved it with <a href="https://www.terrahub.io/blog/terraform-for-serverless-series-enhanced-management-of-aws-lambda-functions/">Enhanced Management of AWS Lambda Functions</a>. Today I would like to double down on this approach and describe in details how our team provisions and deploys Amazon S3 with website hosting feature for static web pages or single page applications.
        </p>
        <h3>Terraform for Amazon S3</h3>
        <p class="graf graf-up">
            Similar to <a href="https://www.terrahub.io/blog/terraform-for-serverless-series-enhanced-management-of-aws-lambda-functions/">previous blog post</a>, it should go without saying (or at least stated up front): My personal preference is to separate terraform configurations into group / type / service / function specific .tf files. So, normally, I would define my providers in provider.tf, setup my data in data.tf, specify my variables in variables.tf, configure my resources in main.tf and so on. But, for the purpose of this article, I'm putting everything all together into one single .tf file, ignoring best practices as long as it works:
        </p>
        <script src="https://gist.github.com/eistrati/48be4a65ea7c9eb50fa15686ea3890aa.js"></script>
        <p class="graf graf-grap">
            Simply put, above code will create Amazon S3 bucket with 2 features enabled: (1) website hosting and (2) cross-origin resource sharing. Access control list permissions are set to read-only mode to anyone.
        </p>
        <p class="graf graf-grap">
            To be noted that <span class="italic">index.html</span> and <span class="italic">404.html</span> will not be uploaded somehow magically by default to newly created bucket. Furthermore, in order to update our website with new content, we would need to upload updated files / assets to S3 bucket including (but not limited to) html, scripts, stylesheets, images, etc. Therefore, first upload and all subsequent updates must be implemented separately because these operations are not managed natively by terraform.
        </p>
        <h3>Terraform for Website Build</h3>
        <p class="graf graf-up">
            In AWS Lambda function we have implemented  terraform's <span class="italic">external</span> and <span class="italic">null_data_source</span> data configurations. The goal of external data is to trigger custom script that executes build process, while null data is referenced in terraform resource configuration as a trigger on terraform plan or terraform apply actions. In order to link them together natively, null_data_source data configuration depends on external data.
        </p>
        <p class="graf graf-up">
            Now, the main trick of this approach is who is triggering the code execution. In case of terraform configuration for AWS Lambda this job is managed by <span class="italic">source_hash_code</span>. This attribute connects <span class="italic">aws_lambda_function</span> resource to <span class="italic">build.js</span> script through external data. We use <span class="italic">base64sha256</span> function on <span class="italic">example.zip</span> file as the trigger, so every time when .zip is changed during terraform apply, corresponding AWS Lambda function is updated.
        </p>
        <p class="graf graf-up">
            Let's apply the same approach to terraform configuration for Amazon S3:
        </p>
        <script src="https://gist.github.com/eistrati/eb141745b52d25d6c13fa780be32f66b.js"></script>
        <p class="graf graf-up">
            Terraform's S3 bucket resource configuration doesn't offer any native triggers, so we decided to engage <span class="italic">null_resource</span> with <span class="italic">triggers</span> and <span class="italic">provisioner</span> instead. In this case provisioner is the one executing build.sh script, while triggers are associated with <span class="italic">timestamp</span> value which in theory is different at every run. This configuration assures build process execution at every terraform plan and terraform apply action.
        </p>
        <p class="graf graf-up">
            Let's take a look at build.sh script:
        </p>
        <script src="https://gist.github.com/eistrati/6127cd7554a4a8f0dd4afaed4ded61aa.js"></script>
        <p class="graf graf-up">
            In this article we intentionally used bash instead of nodejs to show that build process can be language agnostic. First part of the script validates input variables. Second part of the script is application specific build process which in our case is managed by npm. Third part of the script is using awscli in order to upload newly created build to Amazon S3 bucket. Last part of the script is a simple echo to show that everything was successful. Note that all messages are wrapped into JSON format in order to make them compatible with terraform actions like plan or apply. Especially in case of a build failure, developers will be able to see the corresponding failure message in its own terraform output.
        </p>
        <h3>Still Needs Improvements</h3>
        <p class="graf graf-up">Unfortunately, above code is not perfect. We are aware of the following issues:</p>
        <ul class="graf graf--li graf-grap">
            <li>
                <span class="italic">build.sh</span> will be executed at every terraform plan action (as well as apply or destroy if plan is not passed as input variable); we are working to optimize it and improve it by checking if any file in <span class="italic">build_path</span> was recently changed in comparison with timestamp of corresponding file (or files) in <span class="italic">s3_path</span>
            </li>
            <li>
                this implementation triggers builds on <span class="italic">timestamp</span>; we are working to optimize and improve it by comparing the timestamp of previous build with triggers value generated by terraform
            </li>
        </ul>
        <p class="graf graf-grap">
            <span class="italic">Spoiler Alert:</span> all steps and work-arounds described in this article are carefully crafted into language agnostic functionality that will be released soon as a new feature in our open source project <a href="https://github.com/TerraHubCorp/terrahub" alt="TerraHub on GitHub" target="_blank" rel="noreferrer">TerraHub CLI</a>.
        </p>
        <p class="graf graf-grap">
            We would love to hear thoughts and comments on what could be done better.
        </p>
    </div>


    <div class="container u-maxWidth740">
        <h4>Final Thoughts</h4>
        <p class="graf graf-up">
            TerraHub.io is the DevOps Hub for Terraform Automation. We provide managed services
            that simplify cloud resources management using terraform. If this is of your interest
            and you'd like to learn more, please feel free to reach out over
            <a href="mailto:hello@terrahub.io" target="_blank" rel="noopener">Email</a>,
            <a href="https://twitter.com/terrahubcorp" alt="TerraHub on Twitter" target="_blank" rel="noreferrer">Twitter</a> or
            <a href="https://www.linkedin.com/company/terrahubcorp" alt="TerraHub on LinkedIn" target="_blank" rel="noreferrer">LinkedIn</a>.
            We'd be happy to help!
        </p>
    </div>

{% endblock %}
