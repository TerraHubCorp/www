{% extends '../blog-post.twig' %}

{% block content %}
    <div class="small-container">
        <p class="initial-link">
        This article was initially published here:
            <a href="https://medium.com/terrahub/introducing-terrahub-io-devops-hub-for-terraform-b7856f96d665" target="_blank" rel="noreferrer">https://medium.com/terrahub/introducing-terrahub-io-devops-hub-for-terraform-b7856f96d665</a>
        </p>
    </div>
    <div class="container u-maxWidth740">
        <h1>Introducing TerraHub.io — DevOps Hub for Terraform</h1>
        <p class="graf-gray">August 12th, 2018 / 4 min read </p>
        <p class="graf graf-up">
            Over the last couple of months we have been working with several customers to reduce
            the development burden of terraform configuration and simplify the operational complexity
            of terraform automated workflows. Advanced guide
            <a href="https://www.terraform.io/guides/running-terraform-in-automation.html#automated-workflow-overview" target="_blank" rel="noreferrer">
                Running Terraform in Automation</a> inspired
            us to be creative and follow a path of innovation. Today we are proud to announce the
            open source of <a href="https://github.com/TerraHubCorp/terrahub" alt="TerraHub on GitHub" target="_blank" rel="noreferrer">TerraHub CLI</a>
            and launch of <a href="https://www.terrahub.io/">TerraHub.io</a> — DevOps Hub for Terraform Automation.
        </p>
        <h3>What is TerraHub?</h3>
        <p class="graf graf-up">
            TerraHub is a terraform centric devops tool that simplifies provisioning and management
            at scale of cloud resources and cloud services across multiple cloud accounts.
            For example: Serverless on Amazon AWS, or Kubernetes on Google Cloud, or VMs on Microsoft Azure.
        </p>
        <p class="graf graf-grap">This tool empowers customers to:</p>
        <ol class="graf graf-ol-li graf-grap">
            <li>Manage AWS, Google Cloud, Microsoft Azure and others in one place</li>
            <li>Manage VM-based, Containers, Serverless and others using one workflow</li>
            <li>Manage ALL cloud resources securely in customer's private networks</li>
            <li>Manage ALL terraform executions in one system using one CI &amp; CD process</li>
        </ol>
        <h3>How Does It Work?</h3>
        <p class="graf graf-up">
            Let's assume we already have some terraform configurations and we'd like to use
            TerraHub.io as a management and automation layer. Here below are the steps that we'll have to follow:
        </p>
        <h4>Step 1: Create Project</h4>
        <p class="graf graf-up">
            TerraHub is based on projects, which are uniquely identifiable entities that manage under
            the same umbrella related cloud accounts, regions, services and resources.
            Below snippet of code shows how to create a project for existing terraform configuration:
        </p>
        <script src="https://gist.github.com/eistrati/61d128bbeaad82aea5f9d7636ec4c214.js"></script>
        <div class="center img-description">
            terrahub project
        </div>
        <h4>Step 2: Create Components</h4>
        <p class="graf graf-up">
            Next, emphasize which folders in current structure will be executed via terraform commands.
            TerraHub maps those folders as components (see below):
        </p>
        <script src="https://gist.github.com/eistrati/6539ac455c752a347eefd81b8cfdc666.js"></script>
        <div class="center img-description">
            terrahub component
        </div>
        <h4>Step 3: Run Automation</h4>
        <p class="graf graf-up">
            Once all components are mapped, TerraHub can execute corresponding terraform commands
            in distributed mode. For example, <span class="italic">terrahub init</span> will execute multiple
            <span class="italic">terraform init</span> in paralel,
            depends on how many components are defined and how much CPU and RAM is available.
            But the most important feature is automated workflow, inspired from advanced guide
            Running Terraform in Automation, which executes <span class="italic">init</span> > <span class="italic">workspace</span> > <span class="italic">plan</span> >
            <span class="italic">apply</span> in automated mode and triggers, if defined, <span class="italic">before</span> or <span class="italic">after</span> hooks used for automated testing:
        </p>
        <script src="https://gist.github.com/eistrati/9e197a76707b0752de818354cec6d50b.js"></script>
        <div class="center img-description">
            terrahub run
        </div>
        <h4>Step 4: View Results</h4>
        <p class="graf graf-up">
            One way to view terraform results is using terraform output, but it doesn't show the whole context.
            TerraHub implemented terrahub list, which uses native capabilities of cloud providers to list resources
            across projects, cloud accounts, cloud regions and cloud services:
        </p>
        <script src="https://gist.github.com/eistrati/70c5e529f84d5f05fd03173ffce06f35.js"></script>
        <div class="center img-description">
            terrahub list
        </div>
        <h4>Bonus: User Interface</h4>
        <p class="graf graf-up">
            The most important innovation is a nice shiny UI that TerraHub provides to registered users.
            We're open source friendly, allowing unlimited access to public repositories,
            but limited only to one cloud account. Customers can upgrade to paid version
            in order to use private repositories or multiple cloud accounts,
            as well as deploy TerraHub in their cloud accounts through an Enterprise License.
        </p>
    </div>
    <div class="u-maxWidth1000 sectionLayout">
        <img src="{{ asset('@img/blog/2018-08-12/dashboard.png') }}" alt="Dashboard UI" />
        <div class="center img-description">
            Dashboard UI
        </div>
    </div>
    <div class="container u-maxWidth740">
        <h3>What Is TerraHub Made Of?</h3>
        <p class="graf graf-up">
            TerraHub consists of 3 major systems:
        </p>
        <ul class="graf graf--li graf-grap">
           <li>TerraHub CLI (hosted by <a href="https://github.com/TerraHubCorp/terrahub" alt="TerraHub on GitHub" target="_blank" rel="noreferrer">
                   https://github.com/TerraHubCorp/terrahub</a>)</li>
            <li>
                TerraHub API (hosted by <a href="https://www.terrahub.io/">https://www.terrahub.io</a>)
            </li>
            <li>
                TerraHub Console (hosted by <a href="https://console.terrahub.io/">https://console.terrahub.io</a>)
            </li>
        </ul>

        <div class="layoutOutsetLeft">
            <div class="floatleft">
                <script src="https://gist.github.com/eistrati/0ddf9444fc869cccf4cbee1e0689f270.js"></script>
                <div class="center img-description">
                    terrahub --help
                </div>
            </div>
            <p class="graf graf-gists">
                TerraHub CLI is the open source system that distributes automated execution of terraform configurations,
                enables automated testing of terraform commands results, creates faster and easier new terraform configurations,
                as well as visualizes cloud resources under management. It can be used either as a stand alone devops tool
                or as an integrated tool chain with TerraHub API.
            </p>
            <p class="graf graf-grap">
                TerraHub API is the backend system that collects data from TerraHub CLI and manages TerraHub Console.
                This system empowers developers and businesses to centralize their data generated by their
                terraform configurations that span across cloud providers, cloud accounts, cloud regions and cloud services.
                It shifts the focus from reactive processes to predictive behavior, making cloud resources management easier,
                more reliable and better in terms of security.
            </p>
            <p class="graf graf-grap">
                TerraHub Console is the frontend system that visualizes data collected and stored by TerraHub API.
                This system empowers developers and businesses view in realtime what is happening to their cloud
                resources management, as well as audit and see reports of what happened to particular aspects
                of their cloud accounts over a period of time.
            </p>
        </div>
    </div>
    <div class="u-maxWidth1000 sectionLayout">
        <img src="https://cdn-images-1.medium.com/max/1000/1*hTf838lYlbUT7T0hxYPe6g.gif" alt="TerraHub.io Realtime UI" />
        <div class="center img-description">
            Realtime UI
        </div>
    </div>

    <div class="container u-maxWidth740">
        <h4>Final Thoughts</h4>
        <p class="graf graf-up">
            TerraHub.io is the DevOps Hub for Terraform Automation. We provide managed services
            that simplify cloud resources management using terraform. If this is of your interest
            and you'd like to learn more, please feel free to reach out over
            <a href="mailto:hello@terrahub.io" target="_blank" rel="noopener">Email</a>,
            <a href="https://twitter.com/terrahubcorp" alt="TerraHub on Twitter" target="_blank" rel="noreferrer">Twitter</a> or
            <a href="https://www.linkedin.com/company/terrahubcorp" alt="TerraHub on LinkedIn" target="_blank" rel="noreferrer">LinkedIn</a>.
            We'd be happy to help!
        </p>
    </div>

{% endblock %}
