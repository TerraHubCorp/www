{% extends '../blog-post.twig' %}

{% block content %}
    <div class="container u-maxWidth740">
        <h1>Terraform for Serverless Series: Enhanced Management of AWS Lambda Functions</h1>
        <p class="graf-gray">September 19th, 2018 / 5 min read </p>
        <p class="graf graf-up">
            I quickly became fascinated by terraform's simplicity and ease of use. As an engineer, you can tell when a tool just works. This reliability and trust in positive results makes it indispensable. And, sometimes, these experiences evolve into something beyond original capabilities. In this article, I would like to describe one of those experiences. Specifically, I will share our simplified version of compiling and deploying AWS Lambda functions using terraform.
        </p>
        <h3>Terraform for Serverless Applications</h3>
        <p class="graf graf-up">
            <a href="https://www.terraform.io/docs/providers/aws/guides/serverless-with-aws-lambda-and-api-gateway.html" target="_blank" rel="noreferrer">
                Serverless Applications with AWS Lambda and API Gateway</a> is a very good piece of documentation and I quickly came to appreciate it. Although, in my humble opinion, I believe that most of us have more complex use cases that can't fit so easily into below steps (quoted from above documentation):
        </p>
        <pre><code class="html">
 $ cd example
 $ zip ../example.zip main.js
   adding: main.js (deflated 33%)
 $ cd ..
        </code></pre>
        <p class="graf graf-grap">
            Although technically we can achive above situation by bundling our code with tools like webpack, in this article I would like to cover a larger pool of use cases by providing a better solution and more sustainable alternative that will work with terraform.
        </p>
        <h3>Terraform for AWS Lambda</h3>
        <p class="graf graf-up">
            My personal preference is to separate terraform configurations into group / type / service / function specific .tf files. So, normally, I would define my providers in provider.tf, setup my data in data.tf, specify my variables in variables.tf, configure my resources in main.tf and so on. But, for the purpose of this article, I'm putting everything all together into one single .tf file, ignoring best practices as long as it works:
        </p>
        <script src="https://gist.github.com/eistrati/7293707e207de34a54fdf07416d2b7ae.js"></script>
        <div class="center img-description">
           <a href="https://www.terraform.io/docs/providers/aws/guides/serverless-with-aws-lambda-and-api-gateway.html#creating-the-lambda-function" target="_blank" rel="noreferrer">
               https://www.terraform.io/docs/providers/aws/guides/serverless-with-aws-lambda-and-api-gateway.html#creating-the-lambda-function</a>
        </div>
        <p class="graf graf-grap">
            Above terraform configuration assumes <span class="italic">s3://terraform-serverless-example/v1.0.0/example.zip</span> exists and is publicly accessible. In order to update this lambda function, just create and upload the new version (e.g. <span class="italic">1.0.1</span>) of .zip file into S3 and execute terraform apply with new app version number (e.g. <span class="italic">terraform apply -var="app_version=1.0.1"</span>).
        </p>
        <p class="graf graf-grap">
            Next, I would like to describe a better approach that is focused on AWS Lambda function's .zip file and terraform data configuration.
        </p>
        <h3>Terraform for ZIP File</h3>
        <p class="graf graf-up">
            Native terraform implementation for AWS Lambda doesn't provide any simple capability to create or update .zip files. But that didn't stop our team to come up with fully enhanced and fully automated process to build and compress everything we want related to AWS Lambda function into .zip file using native terraform features. Here below is a simplified example of what we've been able to achieve so far (which, by the way, I know for a fact that could be improved):
        </p>
        <div class="layoutOutsetLeft">
            <div class="floatleft">
                <script src="https://gist.github.com/eistrati/f616cac73f4349db7f05cede1871873a.js"></script>
            </div>
            <p class="graf graf-gists">
                Although it's not mandatory, we have included in output's configuration ".*". This syntax will ensure that no matter what is the <span class="italic">count</span> number in resource, output will always provide some kind of value back.
            </p>
            <p class="graf graf-grap">
                Next, we have added to <span class="italic">lambda function</span> arguments like <span class="italic">count</span> to make sure that function is not created if program fails and <span class="italic">source_code_hash</span> to allow terraform natively compare if newly created .zip file is different from the one already deployed.
            </p>
            <p class="graf graf-grap">
                We have defined <span class="italic">null data source</span> that links to <span class="italic">source_code_hash</span> and depends on <span class="italic">external data</span> (described in next paragraph). This piece of code is triggered on every execution of terraform plan (as well as apply or destroy if plan is not passed as input variable).
            </p>
            <p class="graf graf-grap">
                Last, but not the least, we have defined <span class="italic">external data</span> that links to <span class="italic">count</span>. This piece of code is triggered on each execution of <span class="italic">null data source</span>. The "query" in <span class="italic">external data</span> allows us to pass any value or variable we need from terraform to the program. As result, terraform expects from the program to return a valid json.
            </p>
            <p class="graf graf-grap">
                In our terraform example from above, we call <span class="italic">node</span> as external program and <span class="italic">build.js</span> as the argument. Here below is the simplified version of <span class="italic">build.js</span> script:
            </p>
        </div>
        <script src="https://gist.github.com/eistrati/d51c3d7fc31c71e96ba5d64d3b5fc68b.js"></script>
        <p class="graf graf-grap">
            To summarize, our build script implements 4 steps to achieve its goal:
        </p>
        <ol class="graf graf-ol-li graf-grap">
            <li>Installs production dependencies / node_modules using <span class="italic">npm</span></li>
            <li>Creates bundled JavaScript using <span class="italic">webpack</span></li>
            <li>Compresses bundled JavaScript (and JSON) files into .zip</li>
            <li>Uploads .zip file into S3</li>
        </ol>
        <p class="graf graf-grap">
            We have chosen Node.js for <span class="italic">build.js</span> only because the engineer who created this script feels more comfortable with JavaScript. But it's important to point out that it could have been <span class="italic">build.sh</span> or <span class="italic">build.py</span> (or literally any other language that can read input data from <span class="italic">stdin</span> and return json to <span class="italic">stdout</span>).
        </p>
        <h3>Still Needs Improvements</h3>
        <p class="graf graf-up">Unfortunately, above code is not perfect. We are aware of the following issues:</p>
        <ul class="graf graf--li graf-grap">
            <li>
                <span class="italic">build.js</span> will be executed at every terraform plan action (as well as apply or destroy
                if plan is not passed as input variable); we are working to optimize it and improve
                it by checking if any file in <span class="italic">lambda_path</span> was recently changed in comparison with
                timestamp of latest .zip file
            </li>
            <li>
                <span class="italic">source_code_hash</span> is different for every execution of terraform plan and therefore tries to
                redeploy the lambda function on every execution of terraform apply; we are working to optimize
                it and improve it by persisting the latest .zip file and updating it with newly created .js (and .json)
                files which, in return, generates the same hash if no files have been changed
            </li>
        </ul>
        <p class="graf graf-grap">
            <span class="italic">Spoiler Alert:</span> all steps and work-arounds described in this article are carefully crafted into language agnostic functionality that will be released soon as a new feature in our open source project <a href="https://github.com/TerraHubCorp/terrahub" alt="TerraHub on GitHub" target="_blank" rel="noreferrer">TerraHub CLI</a>.
        </p>
        <p class="graf graf-grap">
            We would love to hear thoughts and comments on what could be done better.
        </p>
    </div>


    <div class="container u-maxWidth740">
        <h4>Final Thoughts</h4>
        <p class="graf graf-up">
            TerraHub.io is the DevOps Hub for Terraform Automation. We provide managed services
            that simplify cloud resources management using terraform. If this is of your interest
            and you'd like to learn more, please feel free to reach out over
            <a href="mailto:hello@terrahub.io" target="_blank" rel="noopener">Email</a>,
            <a href="https://twitter.com/terrahubcorp" alt="TerraHub on Twitter" target="_blank" rel="noreferrer">Twitter</a> or
            <a href="https://www.linkedin.com/company/terrahubcorp" alt="TerraHub on LinkedIn" target="_blank" rel="noreferrer">LinkedIn</a>.
            We'd be happy to help!
        </p>
    </div>

{% endblock %}
